    fn get_value_mediator(board: &mut Array2D<i64>, x: usize, y: usize, dir: &Direction) -> Option<i64>{
        println!("x: {}, y: {}", x, y);

        match dir {
            Direction::RIGHT => Game::get_value_from(board, x, y-1, dir),
            _ => None,
        }
    }


    fn get_value_from(board: &mut Array2D<i64>, x: usize, y: usize, dir: &Direction) -> Option<i64>{
        // y is horizontal, x is vertical
        println!("hej");
        match board[(x,y)] {
            0 => {
                if y != 0 {
                    Game::get_value_from(board, x, y-1, dir)
                }else {
                    Some(0)
                }
            },
            a => {
                board[(x,y)] = 0;
                Some(a)
            },
        }
    }


    pub fn swipe(&mut self, dir: &Direction) {
        let board = self.get_mut_board();
        for i in 0..4 {
            let mut n = 3;

            // gets next Number to the left, returns None if no more numbers
            while let Some(value) = Game::get_value_from(board, i, n-1, dir) {
                println!("{}", value);

                // no more columns to check
                println!("n is {}", n);
                if n == 0{
                    break;
                }

                // match value from current position on the board
                match board[(i,n)]{
                    //current position is 0, set to value
                    0 => {
                        board[(i,n)] = value;
                        
                        //checks if there is an equal value as the next number.
                        // Otherwise places next number directly in the next position
                        if let Some(a) = Game::get_value_from(board, i, n-1, dir){
                            Game::set_board_value(board, i, n, a, value);
                            n -= 1;
                        }
                        else {
                            break;
                        }
                    },
                    // current position is not 0, update if equal to value
                    //Otherwise update next position.
                    a => {
                        Game::set_board_value(board, i, n, value, a);
                        n-=1;
                    },
                }
            }
        }
    }


    pub fn print_board(board: &Array2D<i64>){
        for row_iter in board.rows_iter(){
            for element in row_iter{
                print!("{} ", element);
            }
            println!();
        }
        println!();
    }